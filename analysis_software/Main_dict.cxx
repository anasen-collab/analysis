//
// File generated by rootcint at Tue Jan 31 11:10:47 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME Main_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Main_dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SiHit SiHit;
      #else
      class SiHit  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::SiHit::SortByDetector SortByDetector;
         #else
         class SortByDetector  {
            public:
            //friend XX;
            int DetID; //
            int UpMult; //
            int DownMult; //
            int FrontMult; //
            int BackMult; //
            int HitType; //
            vector< Int_t > UpChNum; //
            vector< Int_t > DownChNum; //
            vector< Int_t > FrontChNum; //
            vector< Int_t > BackChNum; //
            vector< Double_t > EUp_Raw; //
            vector< Double_t > EDown_Raw; //
            vector< Double_t > EFront_Raw; //
            vector< Double_t > EBack_Raw; //
            vector< Double_t > EUp_Pulser; //
            vector< Double_t > EDown_Pulser; //
            vector< Double_t > EFront_Pulser; //
            vector< Double_t > EBack_Pulser; //
            vector< Double_t > EUp_Rel; //
            vector< Double_t > EDown_Rel; //
            vector< Double_t > EFront_Rel; //
            vector< Double_t > EBack_Rel; //
            vector< Double_t > SX3_ZUp; //
            vector< Double_t > SX3_ZDown; //
            vector< Double_t > EUp_Cal; //
            vector< Double_t > EDown_Cal; //
            vector< Double_t > EFront_Cal; //
            vector< Double_t > EBack_Cal; //
            vector< Double_t > TUp; //
            vector< Double_t > TDown; //
            vector< Double_t > TFront; //
            vector< Double_t > TBack; //
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::SiHit::SortByHit SortByHit;
         #else
         class SortByHit  {
            public:
            //friend XX;
            int NHitsInDet; //
            int DetID; //
            int HitType; //
            int FrontChannel; //
            int BackChannel; //
            double EnergyBack; //
            double EnergyFront; //
            double Energy; //
            double Time; //
            double X; //
            double Y; //
            double Z; //
            double ZUp_Dummy; //
            double ZDown_Dummy; //
            double XW; //
            double YW; //
            double ZW; //
            double RW; //
            double PhiW; //
            double RFTime; //
            double MCPTime; //
         };
         #endif

         int NSiHits; //
         SortByDetector det_obj; //
         SortByHit hit_obj; //
         vector< SortByDetector > Detector; //
         vector< SortByDetector >* ReadDet; //
         vector< SortByHit > Hit; //
         vector< SortByHit >* ReadHit; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::PCHit PCHit;
      #else
      class PCHit  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::PCHit::SortByPC SortByPC;
         #else
         class SortByPC  {
            public:
            //friend XX;
            int WireID; //
            double Down; //
            double Up; //
            double DownVoltage; //
            double UpVoltage; //
            double Energy; //
            double Z; //
            double XW; //
            double YW; //
            double ZW; //
            double RW; //
            double PhiW; //
            int TrackType; //
         };
         #endif

         int NPCHits; //
         SortByPC pc_obj; //
         vector< SortByPC > Hit; //
         vector< SortByPC >* ReadHit; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Track Track;
      #else
      class Track  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::Track::TrackEvent TrackEvent;
         #else
         class TrackEvent  {
            public:
            //friend XX;
            int TrackType; //
            int HitType; //
            double SiEnergy; //
            double SiZ; //
            double SiX; //
            double SiY; //
            double SiR; //
            double SiPhi; //
            int DetID; //
            double PCEnergy; //
            double PCZ; //
            double PCX; //
            double PCY; //
            double PCR; //
            double PCPhi; //
            int WireID; //
            double IntPoint; //
            double IntPoint_X; //
            double IntPoint_Y; //
            double DiffIntPoint; //
            double DiffIntPoint_X; //
            double DiffIntPoint_Y; //
            double PathLength; //
            double Theta; //
            double Phi; //
            double BeamEnergy; //
            double EnergyLoss; //
            double PCZ_Ref; //
         };
         #endif

         int NTracks; //
         int NTracks1; //
         int NTracks2; //
         int NTracks3; //
         TrackEvent track_obj; //
         vector< TrackEvent > TrEvent; //
         vector< TrackEvent >* ReadTrEvent; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void SiHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SiHit_Dictionary();
   static void *new_SiHit(void *p = 0);
   static void *newArray_SiHit(Long_t size, void *p);
   static void delete_SiHit(void *p);
   static void deleteArray_SiHit(void *p);
   static void destruct_SiHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SiHit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SiHit) == sizeof( ::ROOTShadow::Shadow::SiHit));
      ::SiHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SiHit),0);
      static ::ROOT::TGenericClassInfo 
         instance("SiHit", "./tree_structure.h", 12,
                  typeid(::SiHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &SiHit_ShowMembers, &SiHit_Dictionary, isa_proxy, 4,
                  sizeof(::SiHit) );
      instance.SetNew(&new_SiHit);
      instance.SetNewArray(&newArray_SiHit);
      instance.SetDelete(&delete_SiHit);
      instance.SetDeleteArray(&deleteArray_SiHit);
      instance.SetDestructor(&destruct_SiHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SiHit*)
   {
      return GenerateInitInstanceLocal((::SiHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SiHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SiHit_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SiHit*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void SiHitcLcLSortByDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SiHitcLcLSortByDetector_Dictionary();
   static void *new_SiHitcLcLSortByDetector(void *p = 0);
   static void *newArray_SiHitcLcLSortByDetector(Long_t size, void *p);
   static void delete_SiHitcLcLSortByDetector(void *p);
   static void deleteArray_SiHitcLcLSortByDetector(void *p);
   static void destruct_SiHitcLcLSortByDetector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SiHit::SortByDetector*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SiHit::SortByDetector) == sizeof( ::ROOTShadow::Shadow::SiHit::SortByDetector));
      ::SiHit::SortByDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SiHit::SortByDetector),0);
      static ::ROOT::TGenericClassInfo 
         instance("SiHit::SortByDetector", "./tree_structure.h", 19,
                  typeid(::SiHit::SortByDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &SiHitcLcLSortByDetector_ShowMembers, &SiHitcLcLSortByDetector_Dictionary, isa_proxy, 4,
                  sizeof(::SiHit::SortByDetector) );
      instance.SetNew(&new_SiHitcLcLSortByDetector);
      instance.SetNewArray(&newArray_SiHitcLcLSortByDetector);
      instance.SetDelete(&delete_SiHitcLcLSortByDetector);
      instance.SetDeleteArray(&deleteArray_SiHitcLcLSortByDetector);
      instance.SetDestructor(&destruct_SiHitcLcLSortByDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SiHit::SortByDetector*)
   {
      return GenerateInitInstanceLocal((::SiHit::SortByDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SiHit::SortByDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SiHitcLcLSortByDetector_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SiHit::SortByDetector*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void SiHitcLcLSortByHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SiHitcLcLSortByHit_Dictionary();
   static void *new_SiHitcLcLSortByHit(void *p = 0);
   static void *newArray_SiHitcLcLSortByHit(Long_t size, void *p);
   static void delete_SiHitcLcLSortByHit(void *p);
   static void deleteArray_SiHitcLcLSortByHit(void *p);
   static void destruct_SiHitcLcLSortByHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SiHit::SortByHit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SiHit::SortByHit) == sizeof( ::ROOTShadow::Shadow::SiHit::SortByHit));
      ::SiHit::SortByHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SiHit::SortByHit),0);
      static ::ROOT::TGenericClassInfo 
         instance("SiHit::SortByHit", "./tree_structure.h", 68,
                  typeid(::SiHit::SortByHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &SiHitcLcLSortByHit_ShowMembers, &SiHitcLcLSortByHit_Dictionary, isa_proxy, 4,
                  sizeof(::SiHit::SortByHit) );
      instance.SetNew(&new_SiHitcLcLSortByHit);
      instance.SetNewArray(&newArray_SiHitcLcLSortByHit);
      instance.SetDelete(&delete_SiHitcLcLSortByHit);
      instance.SetDeleteArray(&deleteArray_SiHitcLcLSortByHit);
      instance.SetDestructor(&destruct_SiHitcLcLSortByHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SiHit::SortByHit*)
   {
      return GenerateInitInstanceLocal((::SiHit::SortByHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SiHit::SortByHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SiHitcLcLSortByHit_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SiHit::SortByHit*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void PCHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void PCHit_Dictionary();
   static void *new_PCHit(void *p = 0);
   static void *newArray_PCHit(Long_t size, void *p);
   static void delete_PCHit(void *p);
   static void deleteArray_PCHit(void *p);
   static void destruct_PCHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::PCHit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::PCHit) == sizeof( ::ROOTShadow::Shadow::PCHit));
      ::PCHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::PCHit),0);
      static ::ROOT::TGenericClassInfo 
         instance("PCHit", "./tree_structure.h", 166,
                  typeid(::PCHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &PCHit_ShowMembers, &PCHit_Dictionary, isa_proxy, 4,
                  sizeof(::PCHit) );
      instance.SetNew(&new_PCHit);
      instance.SetNewArray(&newArray_PCHit);
      instance.SetDelete(&delete_PCHit);
      instance.SetDeleteArray(&deleteArray_PCHit);
      instance.SetDestructor(&destruct_PCHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::PCHit*)
   {
      return GenerateInitInstanceLocal((::PCHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PCHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void PCHit_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::PCHit*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void PCHitcLcLSortByPC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void PCHitcLcLSortByPC_Dictionary();
   static void *new_PCHitcLcLSortByPC(void *p = 0);
   static void *newArray_PCHitcLcLSortByPC(Long_t size, void *p);
   static void delete_PCHitcLcLSortByPC(void *p);
   static void deleteArray_PCHitcLcLSortByPC(void *p);
   static void destruct_PCHitcLcLSortByPC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::PCHit::SortByPC*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::PCHit::SortByPC) == sizeof( ::ROOTShadow::Shadow::PCHit::SortByPC));
      ::PCHit::SortByPC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::PCHit::SortByPC),0);
      static ::ROOT::TGenericClassInfo 
         instance("PCHit::SortByPC", "./tree_structure.h", 173,
                  typeid(::PCHit::SortByPC), ::ROOT::DefineBehavior(ptr, ptr),
                  &PCHitcLcLSortByPC_ShowMembers, &PCHitcLcLSortByPC_Dictionary, isa_proxy, 4,
                  sizeof(::PCHit::SortByPC) );
      instance.SetNew(&new_PCHitcLcLSortByPC);
      instance.SetNewArray(&newArray_PCHitcLcLSortByPC);
      instance.SetDelete(&delete_PCHitcLcLSortByPC);
      instance.SetDeleteArray(&deleteArray_PCHitcLcLSortByPC);
      instance.SetDestructor(&destruct_PCHitcLcLSortByPC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::PCHit::SortByPC*)
   {
      return GenerateInitInstanceLocal((::PCHit::SortByPC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PCHit::SortByPC*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void PCHitcLcLSortByPC_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::PCHit::SortByPC*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void Track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Track_Dictionary();
   static void *new_Track(void *p = 0);
   static void *newArray_Track(Long_t size, void *p);
   static void delete_Track(void *p);
   static void deleteArray_Track(void *p);
   static void destruct_Track(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Track*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Track) == sizeof( ::ROOTShadow::Shadow::Track));
      ::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Track),0);
      static ::ROOT::TGenericClassInfo 
         instance("Track", "./tree_structure.h", 212,
                  typeid(::Track), ::ROOT::DefineBehavior(ptr, ptr),
                  &Track_ShowMembers, &Track_Dictionary, isa_proxy, 4,
                  sizeof(::Track) );
      instance.SetNew(&new_Track);
      instance.SetNewArray(&newArray_Track);
      instance.SetDelete(&delete_Track);
      instance.SetDeleteArray(&deleteArray_Track);
      instance.SetDestructor(&destruct_Track);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Track*)
   {
      return GenerateInitInstanceLocal((::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Track_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void TrackcLcLTrackEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void TrackcLcLTrackEvent_Dictionary();
   static void *new_TrackcLcLTrackEvent(void *p = 0);
   static void *newArray_TrackcLcLTrackEvent(Long_t size, void *p);
   static void delete_TrackcLcLTrackEvent(void *p);
   static void deleteArray_TrackcLcLTrackEvent(void *p);
   static void destruct_TrackcLcLTrackEvent(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Track::TrackEvent*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Track::TrackEvent) == sizeof( ::ROOTShadow::Shadow::Track::TrackEvent));
      ::Track::TrackEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Track::TrackEvent),0);
      static ::ROOT::TGenericClassInfo 
         instance("Track::TrackEvent", "./tree_structure.h", 222,
                  typeid(::Track::TrackEvent), ::ROOT::DefineBehavior(ptr, ptr),
                  &TrackcLcLTrackEvent_ShowMembers, &TrackcLcLTrackEvent_Dictionary, isa_proxy, 4,
                  sizeof(::Track::TrackEvent) );
      instance.SetNew(&new_TrackcLcLTrackEvent);
      instance.SetNewArray(&newArray_TrackcLcLTrackEvent);
      instance.SetDelete(&delete_TrackcLcLTrackEvent);
      instance.SetDeleteArray(&deleteArray_TrackcLcLTrackEvent);
      instance.SetDestructor(&destruct_TrackcLcLTrackEvent);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Track::TrackEvent*)
   {
      return GenerateInitInstanceLocal((::Track::TrackEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Track::TrackEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TrackcLcLTrackEvent_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::Track::TrackEvent*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
namespace ROOTDict {
   void SiHit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SiHit.
      typedef ::ROOTShadow::Shadow::SiHit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::SiHit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NSiHits", &sobj->NSiHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "det_obj", (void*)&sobj->det_obj);
      R__insp.InspectMember("SiHit::SortByDetector", (void*)&sobj->det_obj, "det_obj.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hit_obj", (void*)&sobj->hit_obj);
      R__insp.InspectMember("SiHit::SortByHit", (void*)&sobj->hit_obj, "hit_obj.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Detector", (void*)&sobj->Detector);
      R__insp.InspectMember("vector<SortByDetector>", (void*)&sobj->Detector, "Detector.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ReadDet", &sobj->ReadDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Hit", (void*)&sobj->Hit);
      R__insp.InspectMember("vector<SortByHit>", (void*)&sobj->Hit, "Hit.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ReadHit", &sobj->ReadHit);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SiHit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SiHit : new ::SiHit;
   }
   static void *newArray_SiHit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SiHit[nElements] : new ::SiHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SiHit(void *p) {
      delete ((::SiHit*)p);
   }
   static void deleteArray_SiHit(void *p) {
      delete [] ((::SiHit*)p);
   }
   static void destruct_SiHit(void *p) {
      typedef ::SiHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SiHit

//______________________________________________________________________________
namespace ROOTDict {
   void SiHitcLcLSortByDetector_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SiHit::SortByDetector.
      typedef ::ROOTShadow::Shadow::SiHit::SortByDetector ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::SiHit::SortByDetector*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DetID", &sobj->DetID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "UpMult", &sobj->UpMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DownMult", &sobj->DownMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FrontMult", &sobj->FrontMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BackMult", &sobj->BackMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HitType", &sobj->HitType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "UpChNum", (void*)&sobj->UpChNum);
      R__insp.InspectMember("vector<Int_t>", (void*)&sobj->UpChNum, "UpChNum.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DownChNum", (void*)&sobj->DownChNum);
      R__insp.InspectMember("vector<Int_t>", (void*)&sobj->DownChNum, "DownChNum.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FrontChNum", (void*)&sobj->FrontChNum);
      R__insp.InspectMember("vector<Int_t>", (void*)&sobj->FrontChNum, "FrontChNum.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BackChNum", (void*)&sobj->BackChNum);
      R__insp.InspectMember("vector<Int_t>", (void*)&sobj->BackChNum, "BackChNum.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EUp_Raw", (void*)&sobj->EUp_Raw);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EUp_Raw, "EUp_Raw.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EDown_Raw", (void*)&sobj->EDown_Raw);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EDown_Raw, "EDown_Raw.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EFront_Raw", (void*)&sobj->EFront_Raw);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EFront_Raw, "EFront_Raw.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EBack_Raw", (void*)&sobj->EBack_Raw);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EBack_Raw, "EBack_Raw.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EUp_Pulser", (void*)&sobj->EUp_Pulser);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EUp_Pulser, "EUp_Pulser.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EDown_Pulser", (void*)&sobj->EDown_Pulser);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EDown_Pulser, "EDown_Pulser.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EFront_Pulser", (void*)&sobj->EFront_Pulser);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EFront_Pulser, "EFront_Pulser.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EBack_Pulser", (void*)&sobj->EBack_Pulser);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EBack_Pulser, "EBack_Pulser.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EUp_Rel", (void*)&sobj->EUp_Rel);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EUp_Rel, "EUp_Rel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EDown_Rel", (void*)&sobj->EDown_Rel);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EDown_Rel, "EDown_Rel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EFront_Rel", (void*)&sobj->EFront_Rel);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EFront_Rel, "EFront_Rel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EBack_Rel", (void*)&sobj->EBack_Rel);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EBack_Rel, "EBack_Rel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SX3_ZUp", (void*)&sobj->SX3_ZUp);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->SX3_ZUp, "SX3_ZUp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SX3_ZDown", (void*)&sobj->SX3_ZDown);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->SX3_ZDown, "SX3_ZDown.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EUp_Cal", (void*)&sobj->EUp_Cal);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EUp_Cal, "EUp_Cal.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EDown_Cal", (void*)&sobj->EDown_Cal);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EDown_Cal, "EDown_Cal.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EFront_Cal", (void*)&sobj->EFront_Cal);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EFront_Cal, "EFront_Cal.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EBack_Cal", (void*)&sobj->EBack_Cal);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->EBack_Cal, "EBack_Cal.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TUp", (void*)&sobj->TUp);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->TUp, "TUp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDown", (void*)&sobj->TDown);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->TDown, "TDown.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TFront", (void*)&sobj->TFront);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->TFront, "TFront.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TBack", (void*)&sobj->TBack);
      R__insp.InspectMember("vector<Double_t>", (void*)&sobj->TBack, "TBack.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SiHitcLcLSortByDetector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SiHit::SortByDetector : new ::SiHit::SortByDetector;
   }
   static void *newArray_SiHitcLcLSortByDetector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SiHit::SortByDetector[nElements] : new ::SiHit::SortByDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_SiHitcLcLSortByDetector(void *p) {
      delete ((::SiHit::SortByDetector*)p);
   }
   static void deleteArray_SiHitcLcLSortByDetector(void *p) {
      delete [] ((::SiHit::SortByDetector*)p);
   }
   static void destruct_SiHitcLcLSortByDetector(void *p) {
      typedef ::SiHit::SortByDetector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SiHit::SortByDetector

//______________________________________________________________________________
namespace ROOTDict {
   void SiHitcLcLSortByHit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SiHit::SortByHit.
      typedef ::ROOTShadow::Shadow::SiHit::SortByHit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::SiHit::SortByHit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NHitsInDet", &sobj->NHitsInDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DetID", &sobj->DetID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HitType", &sobj->HitType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FrontChannel", &sobj->FrontChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BackChannel", &sobj->BackChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EnergyBack", &sobj->EnergyBack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EnergyFront", &sobj->EnergyFront);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", &sobj->Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time", &sobj->Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", &sobj->X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", &sobj->Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &sobj->Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZUp_Dummy", &sobj->ZUp_Dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZDown_Dummy", &sobj->ZDown_Dummy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XW", &sobj->XW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YW", &sobj->YW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZW", &sobj->ZW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RW", &sobj->RW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PhiW", &sobj->PhiW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RFTime", &sobj->RFTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MCPTime", &sobj->MCPTime);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SiHitcLcLSortByHit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SiHit::SortByHit : new ::SiHit::SortByHit;
   }
   static void *newArray_SiHitcLcLSortByHit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SiHit::SortByHit[nElements] : new ::SiHit::SortByHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SiHitcLcLSortByHit(void *p) {
      delete ((::SiHit::SortByHit*)p);
   }
   static void deleteArray_SiHitcLcLSortByHit(void *p) {
      delete [] ((::SiHit::SortByHit*)p);
   }
   static void destruct_SiHitcLcLSortByHit(void *p) {
      typedef ::SiHit::SortByHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SiHit::SortByHit

//______________________________________________________________________________
namespace ROOTDict {
   void PCHit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class PCHit.
      typedef ::ROOTShadow::Shadow::PCHit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::PCHit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NPCHits", &sobj->NPCHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pc_obj", (void*)&sobj->pc_obj);
      R__insp.InspectMember("PCHit::SortByPC", (void*)&sobj->pc_obj, "pc_obj.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Hit", (void*)&sobj->Hit);
      R__insp.InspectMember("vector<SortByPC>", (void*)&sobj->Hit, "Hit.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ReadHit", &sobj->ReadHit);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_PCHit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PCHit : new ::PCHit;
   }
   static void *newArray_PCHit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PCHit[nElements] : new ::PCHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_PCHit(void *p) {
      delete ((::PCHit*)p);
   }
   static void deleteArray_PCHit(void *p) {
      delete [] ((::PCHit*)p);
   }
   static void destruct_PCHit(void *p) {
      typedef ::PCHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::PCHit

//______________________________________________________________________________
namespace ROOTDict {
   void PCHitcLcLSortByPC_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class PCHit::SortByPC.
      typedef ::ROOTShadow::Shadow::PCHit::SortByPC ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::PCHit::SortByPC*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireID", &sobj->WireID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Down", &sobj->Down);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Up", &sobj->Up);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DownVoltage", &sobj->DownVoltage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "UpVoltage", &sobj->UpVoltage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Energy", &sobj->Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &sobj->Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XW", &sobj->XW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YW", &sobj->YW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZW", &sobj->ZW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RW", &sobj->RW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PhiW", &sobj->PhiW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackType", &sobj->TrackType);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_PCHitcLcLSortByPC(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PCHit::SortByPC : new ::PCHit::SortByPC;
   }
   static void *newArray_PCHitcLcLSortByPC(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PCHit::SortByPC[nElements] : new ::PCHit::SortByPC[nElements];
   }
   // Wrapper around operator delete
   static void delete_PCHitcLcLSortByPC(void *p) {
      delete ((::PCHit::SortByPC*)p);
   }
   static void deleteArray_PCHitcLcLSortByPC(void *p) {
      delete [] ((::PCHit::SortByPC*)p);
   }
   static void destruct_PCHitcLcLSortByPC(void *p) {
      typedef ::PCHit::SortByPC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::PCHit::SortByPC

//______________________________________________________________________________
namespace ROOTDict {
   void Track_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Track.
      typedef ::ROOTShadow::Shadow::Track ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NTracks", &sobj->NTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NTracks1", &sobj->NTracks1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NTracks2", &sobj->NTracks2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NTracks3", &sobj->NTracks3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track_obj", (void*)&sobj->track_obj);
      R__insp.InspectMember("Track::TrackEvent", (void*)&sobj->track_obj, "track_obj.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrEvent", (void*)&sobj->TrEvent);
      R__insp.InspectMember("vector<TrackEvent>", (void*)&sobj->TrEvent, "TrEvent.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ReadTrEvent", &sobj->ReadTrEvent);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Track(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Track : new ::Track;
   }
   static void *newArray_Track(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Track[nElements] : new ::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_Track(void *p) {
      delete ((::Track*)p);
   }
   static void deleteArray_Track(void *p) {
      delete [] ((::Track*)p);
   }
   static void destruct_Track(void *p) {
      typedef ::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Track

//______________________________________________________________________________
namespace ROOTDict {
   void TrackcLcLTrackEvent_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Track::TrackEvent.
      typedef ::ROOTShadow::Shadow::Track::TrackEvent ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::Track::TrackEvent*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackType", &sobj->TrackType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HitType", &sobj->HitType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SiEnergy", &sobj->SiEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SiZ", &sobj->SiZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SiX", &sobj->SiX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SiY", &sobj->SiY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SiR", &sobj->SiR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SiPhi", &sobj->SiPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DetID", &sobj->DetID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCEnergy", &sobj->PCEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCZ", &sobj->PCZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCX", &sobj->PCX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCY", &sobj->PCY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCR", &sobj->PCR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCPhi", &sobj->PCPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WireID", &sobj->WireID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IntPoint", &sobj->IntPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IntPoint_X", &sobj->IntPoint_X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IntPoint_Y", &sobj->IntPoint_Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DiffIntPoint", &sobj->DiffIntPoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DiffIntPoint_X", &sobj->DiffIntPoint_X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DiffIntPoint_Y", &sobj->DiffIntPoint_Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PathLength", &sobj->PathLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Theta", &sobj->Theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &sobj->Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BeamEnergy", &sobj->BeamEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EnergyLoss", &sobj->EnergyLoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCZ_Ref", &sobj->PCZ_Ref);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TrackcLcLTrackEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Track::TrackEvent : new ::Track::TrackEvent;
   }
   static void *newArray_TrackcLcLTrackEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Track::TrackEvent[nElements] : new ::Track::TrackEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackcLcLTrackEvent(void *p) {
      delete ((::Track::TrackEvent*)p);
   }
   static void deleteArray_TrackcLcLTrackEvent(void *p) {
      delete [] ((::Track::TrackEvent*)p);
   }
   static void destruct_TrackcLcLTrackEvent(void *p) {
      typedef ::Track::TrackEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Track::TrackEvent

namespace ROOTDict {
   void vectorlEPCHitcLcLSortByPCgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEPCHitcLcLSortByPCgR_Dictionary();
   static void *new_vectorlEPCHitcLcLSortByPCgR(void *p = 0);
   static void *newArray_vectorlEPCHitcLcLSortByPCgR(Long_t size, void *p);
   static void delete_vectorlEPCHitcLcLSortByPCgR(void *p);
   static void deleteArray_vectorlEPCHitcLcLSortByPCgR(void *p);
   static void destruct_vectorlEPCHitcLcLSortByPCgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<PCHit::SortByPC>*)
   {
      vector<PCHit::SortByPC> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<PCHit::SortByPC>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<PCHit::SortByPC>", -2, "prec_stl/vector", 49,
                  typeid(vector<PCHit::SortByPC>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEPCHitcLcLSortByPCgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<PCHit::SortByPC>) );
      instance.SetNew(&new_vectorlEPCHitcLcLSortByPCgR);
      instance.SetNewArray(&newArray_vectorlEPCHitcLcLSortByPCgR);
      instance.SetDelete(&delete_vectorlEPCHitcLcLSortByPCgR);
      instance.SetDeleteArray(&deleteArray_vectorlEPCHitcLcLSortByPCgR);
      instance.SetDestructor(&destruct_vectorlEPCHitcLcLSortByPCgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<PCHit::SortByPC> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<PCHit::SortByPC>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEPCHitcLcLSortByPCgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<PCHit::SortByPC>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEPCHitcLcLSortByPCgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<PCHit::SortByPC> : new vector<PCHit::SortByPC>;
   }
   static void *newArray_vectorlEPCHitcLcLSortByPCgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<PCHit::SortByPC>[nElements] : new vector<PCHit::SortByPC>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEPCHitcLcLSortByPCgR(void *p) {
      delete ((vector<PCHit::SortByPC>*)p);
   }
   static void deleteArray_vectorlEPCHitcLcLSortByPCgR(void *p) {
      delete [] ((vector<PCHit::SortByPC>*)p);
   }
   static void destruct_vectorlEPCHitcLcLSortByPCgR(void *p) {
      typedef vector<PCHit::SortByPC> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<PCHit::SortByPC>

namespace ROOTDict {
   void vectorlESiHitcLcLSortByDetectorgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESiHitcLcLSortByDetectorgR_Dictionary();
   static void *new_vectorlESiHitcLcLSortByDetectorgR(void *p = 0);
   static void *newArray_vectorlESiHitcLcLSortByDetectorgR(Long_t size, void *p);
   static void delete_vectorlESiHitcLcLSortByDetectorgR(void *p);
   static void deleteArray_vectorlESiHitcLcLSortByDetectorgR(void *p);
   static void destruct_vectorlESiHitcLcLSortByDetectorgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<SiHit::SortByDetector>*)
   {
      vector<SiHit::SortByDetector> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SiHit::SortByDetector>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SiHit::SortByDetector>", -2, "prec_stl/vector", 49,
                  typeid(vector<SiHit::SortByDetector>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlESiHitcLcLSortByDetectorgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SiHit::SortByDetector>) );
      instance.SetNew(&new_vectorlESiHitcLcLSortByDetectorgR);
      instance.SetNewArray(&newArray_vectorlESiHitcLcLSortByDetectorgR);
      instance.SetDelete(&delete_vectorlESiHitcLcLSortByDetectorgR);
      instance.SetDeleteArray(&deleteArray_vectorlESiHitcLcLSortByDetectorgR);
      instance.SetDestructor(&destruct_vectorlESiHitcLcLSortByDetectorgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<SiHit::SortByDetector> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SiHit::SortByDetector>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESiHitcLcLSortByDetectorgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<SiHit::SortByDetector>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlESiHitcLcLSortByDetectorgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SiHit::SortByDetector> : new vector<SiHit::SortByDetector>;
   }
   static void *newArray_vectorlESiHitcLcLSortByDetectorgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SiHit::SortByDetector>[nElements] : new vector<SiHit::SortByDetector>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESiHitcLcLSortByDetectorgR(void *p) {
      delete ((vector<SiHit::SortByDetector>*)p);
   }
   static void deleteArray_vectorlESiHitcLcLSortByDetectorgR(void *p) {
      delete [] ((vector<SiHit::SortByDetector>*)p);
   }
   static void destruct_vectorlESiHitcLcLSortByDetectorgR(void *p) {
      typedef vector<SiHit::SortByDetector> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<SiHit::SortByDetector>

namespace ROOTDict {
   void vectorlESiHitcLcLSortByHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESiHitcLcLSortByHitgR_Dictionary();
   static void *new_vectorlESiHitcLcLSortByHitgR(void *p = 0);
   static void *newArray_vectorlESiHitcLcLSortByHitgR(Long_t size, void *p);
   static void delete_vectorlESiHitcLcLSortByHitgR(void *p);
   static void deleteArray_vectorlESiHitcLcLSortByHitgR(void *p);
   static void destruct_vectorlESiHitcLcLSortByHitgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<SiHit::SortByHit>*)
   {
      vector<SiHit::SortByHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SiHit::SortByHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SiHit::SortByHit>", -2, "prec_stl/vector", 49,
                  typeid(vector<SiHit::SortByHit>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlESiHitcLcLSortByHitgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SiHit::SortByHit>) );
      instance.SetNew(&new_vectorlESiHitcLcLSortByHitgR);
      instance.SetNewArray(&newArray_vectorlESiHitcLcLSortByHitgR);
      instance.SetDelete(&delete_vectorlESiHitcLcLSortByHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlESiHitcLcLSortByHitgR);
      instance.SetDestructor(&destruct_vectorlESiHitcLcLSortByHitgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<SiHit::SortByHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SiHit::SortByHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESiHitcLcLSortByHitgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<SiHit::SortByHit>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlESiHitcLcLSortByHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SiHit::SortByHit> : new vector<SiHit::SortByHit>;
   }
   static void *newArray_vectorlESiHitcLcLSortByHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SiHit::SortByHit>[nElements] : new vector<SiHit::SortByHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESiHitcLcLSortByHitgR(void *p) {
      delete ((vector<SiHit::SortByHit>*)p);
   }
   static void deleteArray_vectorlESiHitcLcLSortByHitgR(void *p) {
      delete [] ((vector<SiHit::SortByHit>*)p);
   }
   static void destruct_vectorlESiHitcLcLSortByHitgR(void *p) {
      typedef vector<SiHit::SortByHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<SiHit::SortByHit>

namespace ROOTDict {
   void vectorlETrackcLcLTrackEventgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETrackcLcLTrackEventgR_Dictionary();
   static void *new_vectorlETrackcLcLTrackEventgR(void *p = 0);
   static void *newArray_vectorlETrackcLcLTrackEventgR(Long_t size, void *p);
   static void delete_vectorlETrackcLcLTrackEventgR(void *p);
   static void deleteArray_vectorlETrackcLcLTrackEventgR(void *p);
   static void destruct_vectorlETrackcLcLTrackEventgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<Track::TrackEvent>*)
   {
      vector<Track::TrackEvent> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Track::TrackEvent>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Track::TrackEvent>", -2, "prec_stl/vector", 49,
                  typeid(vector<Track::TrackEvent>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETrackcLcLTrackEventgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Track::TrackEvent>) );
      instance.SetNew(&new_vectorlETrackcLcLTrackEventgR);
      instance.SetNewArray(&newArray_vectorlETrackcLcLTrackEventgR);
      instance.SetDelete(&delete_vectorlETrackcLcLTrackEventgR);
      instance.SetDeleteArray(&deleteArray_vectorlETrackcLcLTrackEventgR);
      instance.SetDestructor(&destruct_vectorlETrackcLcLTrackEventgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<Track::TrackEvent> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Track::TrackEvent>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETrackcLcLTrackEventgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<Track::TrackEvent>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETrackcLcLTrackEventgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Track::TrackEvent> : new vector<Track::TrackEvent>;
   }
   static void *newArray_vectorlETrackcLcLTrackEventgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Track::TrackEvent>[nElements] : new vector<Track::TrackEvent>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETrackcLcLTrackEventgR(void *p) {
      delete ((vector<Track::TrackEvent>*)p);
   }
   static void deleteArray_vectorlETrackcLcLTrackEventgR(void *p) {
      delete [] ((vector<Track::TrackEvent>*)p);
   }
   static void destruct_vectorlETrackcLcLTrackEventgR(void *p) {
      typedef vector<Track::TrackEvent> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<Track::TrackEvent>

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

/********************************************************
* Main_dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMain_dict();

extern "C" void G__set_cpp_environmentMain_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("tree_structure.h");
  G__cpp_reset_tagtableMain_dict();
}
#include <new>
extern "C" int G__cpp_dllrevMain_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SiHit */
static int G__Main_dict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SiHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SiHit[n];
     } else {
       p = new((void*) gvp) SiHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SiHit;
     } else {
       p = new((void*) gvp) SiHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_SiHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SiHit*) G__getstructoffset())->ZeroSi_obj();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SiHit*) G__getstructoffset())->zeroSiHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Main_dict_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SiHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SiHit(*(SiHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_SiHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SiHit G__TSiHit;
static int G__Main_dict_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SiHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SiHit*) (soff+(sizeof(SiHit)*i)))->~G__TSiHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SiHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SiHit*) (soff))->~G__TSiHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Main_dict_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SiHit* dest = (SiHit*) G__getstructoffset();
   *dest = *(SiHit*) libp->para[0].ref;
   const SiHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SiHit::SortByDetector */
// automatic default constructor
static int G__Main_dict_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SiHit::SortByDetector *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SiHit::SortByDetector[n];
     } else {
       p = new((void*) gvp) SiHit::SortByDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SiHit::SortByDetector;
     } else {
       p = new((void*) gvp) SiHit::SortByDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Main_dict_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SiHit::SortByDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SiHit::SortByDetector(*(SiHit::SortByDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SiHit::SortByDetector G__TSiHitcLcLSortByDetector;
static int G__Main_dict_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SiHit::SortByDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SiHit::SortByDetector*) (soff+(sizeof(SiHit::SortByDetector)*i)))->~G__TSiHitcLcLSortByDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SiHit::SortByDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SiHit::SortByDetector*) (soff))->~G__TSiHitcLcLSortByDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Main_dict_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SiHit::SortByDetector* dest = (SiHit::SortByDetector*) G__getstructoffset();
   *dest = *(SiHit::SortByDetector*) libp->para[0].ref;
   const SiHit::SortByDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SiHit::SortByHit */
// automatic default constructor
static int G__Main_dict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SiHit::SortByHit *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SiHit::SortByHit[n];
     } else {
       p = new((void*) gvp) SiHit::SortByHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SiHit::SortByHit;
     } else {
       p = new((void*) gvp) SiHit::SortByHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Main_dict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SiHit::SortByHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SiHit::SortByHit(*(SiHit::SortByHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SiHit::SortByHit G__TSiHitcLcLSortByHit;
static int G__Main_dict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SiHit::SortByHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SiHit::SortByHit*) (soff+(sizeof(SiHit::SortByHit)*i)))->~G__TSiHitcLcLSortByHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SiHit::SortByHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SiHit::SortByHit*) (soff))->~G__TSiHitcLcLSortByHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Main_dict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SiHit::SortByHit* dest = (SiHit::SortByHit*) G__getstructoffset();
   *dest = *(SiHit::SortByHit*) libp->para[0].ref;
   const SiHit::SortByHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PCHit */
static int G__Main_dict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PCHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PCHit[n];
     } else {
       p = new((void*) gvp) PCHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PCHit;
     } else {
       p = new((void*) gvp) PCHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_PCHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PCHit*) G__getstructoffset())->ZeroPC_obj();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PCHit*) G__getstructoffset())->zeroPCHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Main_dict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PCHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PCHit(*(PCHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_PCHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PCHit G__TPCHit;
static int G__Main_dict_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PCHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PCHit*) (soff+(sizeof(PCHit)*i)))->~G__TPCHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PCHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PCHit*) (soff))->~G__TPCHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Main_dict_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PCHit* dest = (PCHit*) G__getstructoffset();
   *dest = *(PCHit*) libp->para[0].ref;
   const PCHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PCHit::SortByPC */
// automatic default constructor
static int G__Main_dict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PCHit::SortByPC *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PCHit::SortByPC[n];
     } else {
       p = new((void*) gvp) PCHit::SortByPC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PCHit::SortByPC;
     } else {
       p = new((void*) gvp) PCHit::SortByPC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Main_dict_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PCHit::SortByPC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PCHit::SortByPC(*(PCHit::SortByPC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PCHit::SortByPC G__TPCHitcLcLSortByPC;
static int G__Main_dict_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PCHit::SortByPC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PCHit::SortByPC*) (soff+(sizeof(PCHit::SortByPC)*i)))->~G__TPCHitcLcLSortByPC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PCHit::SortByPC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PCHit::SortByPC*) (soff))->~G__TPCHitcLcLSortByPC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Main_dict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PCHit::SortByPC* dest = (PCHit::SortByPC*) G__getstructoffset();
   *dest = *(PCHit::SortByPC*) libp->para[0].ref;
   const PCHit::SortByPC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Track */
static int G__Main_dict_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track[n];
     } else {
       p = new((void*) gvp) Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track;
     } else {
       p = new((void*) gvp) Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_237_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->ZeroTr_obj();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_237_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->zeroTrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_237_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Track::Tr_Sisort_method(*((Track::TrackEvent*) G__int(libp->para[0])), *((Track::TrackEvent*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Main_dict_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) Track::Tr_PCsort_method(*((Track::TrackEvent*) G__int(libp->para[0])), *((Track::TrackEvent*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Main_dict_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Track(*(Track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track G__TTrack;
static int G__Main_dict_237_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Track*) (soff+(sizeof(Track)*i)))->~G__TTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Track*) (soff))->~G__TTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Main_dict_237_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* dest = (Track*) G__getstructoffset();
   *dest = *(Track*) libp->para[0].ref;
   const Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Track::TrackEvent */
// automatic default constructor
static int G__Main_dict_238_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track::TrackEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track::TrackEvent[n];
     } else {
       p = new((void*) gvp) Track::TrackEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track::TrackEvent;
     } else {
       p = new((void*) gvp) Track::TrackEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Main_dict_238_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Track::TrackEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Track::TrackEvent(*(Track::TrackEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track::TrackEvent G__TTrackcLcLTrackEvent;
static int G__Main_dict_238_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Track::TrackEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Track::TrackEvent*) (soff+(sizeof(Track::TrackEvent)*i)))->~G__TTrackcLcLTrackEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Track::TrackEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Track::TrackEvent*) (soff))->~G__TTrackcLcLTrackEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Main_dict_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track::TrackEvent* dest = (Track::TrackEvent*) G__getstructoffset();
   *dest = *(Track::TrackEvent*) libp->para[0].ref;
   const Track::TrackEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SiHit */

/* SiHit::SortByDetector */

/* SiHit::SortByHit */

/* PCHit */

/* PCHit::SortByPC */

/* Track */

/* Track::TrackEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMain_dict {
 public:
  G__Sizep2memfuncMain_dict(): p(&G__Sizep2memfuncMain_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMain_dict::*p)();
};

size_t G__get_sizep2memfuncMain_dict()
{
  G__Sizep2memfuncMain_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMain_dict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMain_dict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SortByDetector>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SiHit::SortByDetector>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SortByHit>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SiHit::SortByHit>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SortByPC>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PCHit::SortByPC>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrackEvent>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Main_dictLN_reverse_iteratorlEvectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Track::TrackEvent>",117,G__get_linked_tagnum(&G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SiHit */
static void G__setup_memvarSiHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Main_dictLN_SiHit));
   { SiHit *p; p=(SiHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->NSiHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NSiHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->det_obj)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector),-1,-1,1,"det_obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hit_obj)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit),-1,-1,1,"hit_obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Detector)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR),G__defined_typename("vector<SortByDetector>"),-1,1,"Detector=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ReadDet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR),G__defined_typename("vector<SortByDetector>"),-1,1,"ReadDet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Hit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR),G__defined_typename("vector<SortByHit>"),-1,1,"Hit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ReadHit)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR),G__defined_typename("vector<SortByHit>"),-1,1,"ReadHit=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SiHit::SortByDetector */
static void G__setup_memvarSiHitcLcLSortByDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector));
   { SiHit::SortByDetector *p; p=(SiHit::SortByDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->DetID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"DetID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"UpMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"DownMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FrontMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"FrontMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BackMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"BackMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HitType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"HitType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpChNum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"UpChNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownChNum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"DownChNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FrontChNum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"FrontChNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BackChNum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"BackChNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EUp_Raw)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EUp_Raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EDown_Raw)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EDown_Raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EFront_Raw)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EFront_Raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EBack_Raw)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EBack_Raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EUp_Pulser)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EUp_Pulser=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EDown_Pulser)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EDown_Pulser=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EFront_Pulser)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EFront_Pulser=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EBack_Pulser)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EBack_Pulser=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EUp_Rel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EUp_Rel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EDown_Rel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EDown_Rel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EFront_Rel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EFront_Rel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EBack_Rel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EBack_Rel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SX3_ZUp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"SX3_ZUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SX3_ZDown)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"SX3_ZDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EUp_Cal)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EUp_Cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EDown_Cal)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EDown_Cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EFront_Cal)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EFront_Cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EBack_Cal)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"EBack_Cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TUp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"TUp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TDown)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"TDown=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TFront)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"TFront=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TBack)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"TBack=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SiHit::SortByHit */
static void G__setup_memvarSiHitcLcLSortByHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit));
   { SiHit::SortByHit *p; p=(SiHit::SortByHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->NHitsInDet)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NHitsInDet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DetID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"DetID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HitType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"HitType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FrontChannel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"FrontChannel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BackChannel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"BackChannel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EnergyBack)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"EnergyBack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EnergyFront)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"EnergyFront=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->X)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"X=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZUp_Dummy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ZUp_Dummy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZDown_Dummy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ZDown_Dummy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->XW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"XW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->YW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"YW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ZW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PhiW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PhiW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RFTime)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RFTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MCPTime)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"MCPTime=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PCHit */
static void G__setup_memvarPCHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Main_dictLN_PCHit));
   { PCHit *p; p=(PCHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->NPCHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NPCHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pc_obj)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC),-1,-1,1,"pc_obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Hit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR),G__defined_typename("vector<SortByPC>"),-1,1,"Hit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ReadHit)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR),G__defined_typename("vector<SortByPC>"),-1,1,"ReadHit=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PCHit::SortByPC */
static void G__setup_memvarPCHitcLcLSortByPC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC));
   { PCHit::SortByPC *p; p=(PCHit::SortByPC*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->WireID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"WireID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Down)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Down=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Up)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Up=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DownVoltage)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DownVoltage=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->UpVoltage)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"UpVoltage=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Energy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->XW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"XW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->YW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"YW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ZW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ZW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"RW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PhiW)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PhiW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrackType=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Track */
static void G__setup_memvarTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Main_dictLN_Track));
   { Track *p; p=(Track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->NTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NTracks1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NTracks1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NTracks2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NTracks2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NTracks3)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NTracks3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->track_obj)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent),-1,-1,1,"track_obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrEvent)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR),G__defined_typename("vector<TrackEvent>"),-1,1,"TrEvent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ReadTrEvent)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR),G__defined_typename("vector<TrackEvent>"),-1,1,"ReadTrEvent=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Track::TrackEvent */
static void G__setup_memvarTrackcLcLTrackEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent));
   { Track::TrackEvent *p; p=(Track::TrackEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->TrackType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TrackType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HitType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"HitType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SiEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SiEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SiZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SiZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SiX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SiX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SiY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SiY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SiR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SiR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SiPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"SiPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DetID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"DetID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PCEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PCEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PCZ)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PCZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PCX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PCX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PCY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PCY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PCR)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PCR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PCPhi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PCPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WireID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"WireID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IntPoint)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"IntPoint=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IntPoint_X)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"IntPoint_X=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IntPoint_Y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"IntPoint_Y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DiffIntPoint)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DiffIntPoint=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DiffIntPoint_X)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DiffIntPoint_X=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DiffIntPoint_Y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"DiffIntPoint_Y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PathLength)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PathLength=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Theta)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Theta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BeamEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"BeamEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EnergyLoss)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"EnergyLoss=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PCZ_Ref)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PCZ_Ref=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMain_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSiHit(void) {
   /* SiHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Main_dictLN_SiHit));
   G__memfunc_setup("SiHit",481,G__Main_dict_216_0_1, 105, G__get_linked_tagnum(&G__Main_dictLN_SiHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroSi_obj",1014,G__Main_dict_216_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zeroSiHit",929,G__Main_dict_216_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SiHit", 481, G__Main_dict_216_0_4, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_SiHit), -1, 0, 1, 1, 1, 0, "u 'SiHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SiHit", 607, G__Main_dict_216_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Main_dict_216_0_6, (int) ('u'), G__get_linked_tagnum(&G__Main_dictLN_SiHit), -1, 1, 1, 1, 1, 0, "u 'SiHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSiHitcLcLSortByDetector(void) {
   /* SiHit::SortByDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector));
   // automatic default constructor
   G__memfunc_setup("SortByDetector", 1437, G__Main_dict_217_0_1, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SortByDetector", 1437, G__Main_dict_217_0_2, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector), -1, 0, 1, 1, 1, 0, "u 'SiHit::SortByDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SortByDetector", 1563, G__Main_dict_217_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Main_dict_217_0_4, (int) ('u'), G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByDetector), -1, 1, 1, 1, 1, 0, "u 'SiHit::SortByDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSiHitcLcLSortByHit(void) {
   /* SiHit::SortByHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit));
   // automatic default constructor
   G__memfunc_setup("SortByHit", 904, G__Main_dict_222_0_1, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SortByHit", 904, G__Main_dict_222_0_2, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit), -1, 0, 1, 1, 1, 0, "u 'SiHit::SortByHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SortByHit", 1030, G__Main_dict_222_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Main_dict_222_0_4, (int) ('u'), G__get_linked_tagnum(&G__Main_dictLN_SiHitcLcLSortByHit), -1, 1, 1, 1, 1, 0, "u 'SiHit::SortByHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPCHit(void) {
   /* PCHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Main_dictLN_PCHit));
   G__memfunc_setup("PCHit",440,G__Main_dict_231_0_1, 105, G__get_linked_tagnum(&G__Main_dictLN_PCHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroPC_obj",973,G__Main_dict_231_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zeroPCHit",888,G__Main_dict_231_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PCHit", 440, G__Main_dict_231_0_4, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_PCHit), -1, 0, 1, 1, 1, 0, "u 'PCHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PCHit", 566, G__Main_dict_231_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Main_dict_231_0_6, (int) ('u'), G__get_linked_tagnum(&G__Main_dictLN_PCHit), -1, 1, 1, 1, 1, 0, "u 'PCHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPCHitcLcLSortByPC(void) {
   /* PCHit::SortByPC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC));
   // automatic default constructor
   G__memfunc_setup("SortByPC", 758, G__Main_dict_232_0_1, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SortByPC", 758, G__Main_dict_232_0_2, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC), -1, 0, 1, 1, 1, 0, "u 'PCHit::SortByPC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SortByPC", 884, G__Main_dict_232_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Main_dict_232_0_4, (int) ('u'), G__get_linked_tagnum(&G__Main_dictLN_PCHitcLcLSortByPC), -1, 1, 1, 1, 1, 0, "u 'PCHit::SortByPC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrack(void) {
   /* Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Main_dictLN_Track));
   G__memfunc_setup("Track",501,G__Main_dict_237_0_1, 105, G__get_linked_tagnum(&G__Main_dictLN_Track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroTr_obj",1024,G__Main_dict_237_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zeroTrack",949,G__Main_dict_237_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Tr_Sisort_method",1673,G__Main_dict_237_0_4, 103, -1, -1, 0, 2, 3, 1, 0, 
"u 'Track::TrackEvent' - 0 - a u 'Track::TrackEvent' - 0 - b", (char*)NULL, (void*) G__func2void( (bool (*)(Track::TrackEvent, Track::TrackEvent))(&Track::Tr_Sisort_method) ), 0);
   G__memfunc_setup("Tr_PCsort_method",1632,G__Main_dict_237_0_5, 103, -1, -1, 0, 2, 3, 1, 0, 
"u 'Track::TrackEvent' - 0 - a u 'Track::TrackEvent' - 0 - b", (char*)NULL, (void*) G__func2void( (bool (*)(Track::TrackEvent, Track::TrackEvent))(&Track::Tr_PCsort_method) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Track", 501, G__Main_dict_237_0_6, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_Track), -1, 0, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__Main_dict_237_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Main_dict_237_0_8, (int) ('u'), G__get_linked_tagnum(&G__Main_dictLN_Track), -1, 1, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackcLcLTrackEvent(void) {
   /* Track::TrackEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent));
   // automatic default constructor
   G__memfunc_setup("TrackEvent", 1015, G__Main_dict_238_0_1, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackEvent", 1015, G__Main_dict_238_0_2, (int) ('i'), G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent), -1, 0, 1, 1, 1, 0, "u 'Track::TrackEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackEvent", 1141, G__Main_dict_238_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Main_dict_238_0_4, (int) ('u'), G__get_linked_tagnum(&G__Main_dictLN_TrackcLcLTrackEvent), -1, 1, 1, 1, 1, 0, "u 'Track::TrackEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMain_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"MaxPCHits=24",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"NPCWires=24",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"MaxSiHits=500",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"MaxTracks=100",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"MaxCsIHits=500",1,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMain_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMain_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__Main_dictLN_SiHit = { "SiHit" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_SiHitcLcLSortByDetector = { "SiHit::SortByDetector" , 115 , -1 };
G__linked_taginfo G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_SiHitcLcLSortByHit = { "SiHit::SortByHit" , 115 , -1 };
G__linked_taginfo G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR = { "vector<SiHit::SortByDetector,allocator<SiHit::SortByDetector> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SiHit::SortByDetector,allocator<SiHit::SortByDetector> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR = { "vector<SiHit::SortByHit,allocator<SiHit::SortByHit> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SiHit::SortByHit,allocator<SiHit::SortByHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_PCHit = { "PCHit" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_PCHitcLcLSortByPC = { "PCHit::SortByPC" , 115 , -1 };
G__linked_taginfo G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR = { "vector<PCHit::SortByPC,allocator<PCHit::SortByPC> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_reverse_iteratorlEvectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<PCHit::SortByPC,allocator<PCHit::SortByPC> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_Track = { "Track" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_TrackcLcLTrackEvent = { "Track::TrackEvent" , 115 , -1 };
G__linked_taginfo G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR = { "vector<Track::TrackEvent,allocator<Track::TrackEvent> >" , 99 , -1 };
G__linked_taginfo G__Main_dictLN_reverse_iteratorlEvectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Track::TrackEvent,allocator<Track::TrackEvent> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMain_dict() {
  G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__Main_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__Main_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Main_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__Main_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__Main_dictLN_SiHit.tagnum = -1 ;
  G__Main_dictLN_SiHitcLcLSortByDetector.tagnum = -1 ;
  G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__Main_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Main_dictLN_SiHitcLcLSortByHit.tagnum = -1 ;
  G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR.tagnum = -1 ;
  G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR.tagnum = -1 ;
  G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Main_dictLN_PCHit.tagnum = -1 ;
  G__Main_dictLN_PCHitcLcLSortByPC.tagnum = -1 ;
  G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR.tagnum = -1 ;
  G__Main_dictLN_reverse_iteratorlEvectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Main_dictLN_Track.tagnum = -1 ;
  G__Main_dictLN_TrackcLcLTrackEvent.tagnum = -1 ;
  G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR.tagnum = -1 ;
  G__Main_dictLN_reverse_iteratorlEvectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMain_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Main_dictLN_SiHit),sizeof(SiHit),-1,262400,(char*)NULL,G__setup_memvarSiHit,G__setup_memfuncSiHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Main_dictLN_SiHitcLcLSortByDetector),sizeof(SiHit::SortByDetector),-1,262144,(char*)NULL,G__setup_memvarSiHitcLcLSortByDetector,G__setup_memfuncSiHitcLcLSortByDetector);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Main_dictLN_SiHitcLcLSortByHit),sizeof(SiHit::SortByHit),-1,262144,(char*)NULL,G__setup_memvarSiHitcLcLSortByHit,G__setup_memfuncSiHitcLcLSortByHit);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByDetectorcOallocatorlESiHitcLcLSortByDetectorgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_reverse_iteratorlEvectorlESiHitcLcLSortByHitcOallocatorlESiHitcLcLSortByHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Main_dictLN_PCHit),sizeof(PCHit),-1,262400,(char*)NULL,G__setup_memvarPCHit,G__setup_memfuncPCHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Main_dictLN_PCHitcLcLSortByPC),sizeof(PCHit::SortByPC),-1,262144,(char*)NULL,G__setup_memvarPCHitcLcLSortByPC,G__setup_memfuncPCHitcLcLSortByPC);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_reverse_iteratorlEvectorlEPCHitcLcLSortByPCcOallocatorlEPCHitcLcLSortByPCgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Main_dictLN_Track),sizeof(Track),-1,262400,(char*)NULL,G__setup_memvarTrack,G__setup_memfuncTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Main_dictLN_TrackcLcLTrackEvent),sizeof(Track::TrackEvent),-1,262144,(char*)NULL,G__setup_memvarTrackcLcLTrackEvent,G__setup_memfuncTrackcLcLTrackEvent);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_vectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__Main_dictLN_reverse_iteratorlEvectorlETrackcLcLTrackEventcOallocatorlETrackcLcLTrackEventgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMain_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMain_dict()");
  G__set_cpp_environmentMain_dict();
  G__cpp_setup_tagtableMain_dict();

  G__cpp_setup_inheritanceMain_dict();

  G__cpp_setup_typetableMain_dict();

  G__cpp_setup_memvarMain_dict();

  G__cpp_setup_memfuncMain_dict();
  G__cpp_setup_globalMain_dict();
  G__cpp_setup_funcMain_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMain_dict();
  return;
}
class G__cpp_setup_initMain_dict {
  public:
    G__cpp_setup_initMain_dict() { G__add_setup_func("Main_dict",(G__incsetup)(&G__cpp_setupMain_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMain_dict() { G__remove_setup_func("Main_dict"); }
};
G__cpp_setup_initMain_dict G__cpp_setup_initializerMain_dict;

